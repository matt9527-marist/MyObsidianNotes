{
	"nodes":[
		{"id":"6aab81d5ce47bcc4","type":"text","text":"**Linear Algebra**","x":-2050,"y":400,"width":184,"height":60,"color":"#7744d5"},
		{"id":"98126f375dd34977","type":"text","text":"**Inner Product or Dot Product**\n$$<a,b> = a^Tb = [a_{1},a_{2}] \\space * \\begin{bmatrix}\nb_{1}  \\\\\nb_{2}\n\\end{bmatrix} = a_{1}b_{1} + a_{2}b_{2} = \\sum^{}_{i}a_{i}b_{i}$$ \nwhere the result is a *scalar*.\n\n","x":-2050,"y":460,"width":420,"height":160,"color":"#7744d5"},
		{"id":"26c36e2111e2a00a","type":"text","text":"A matrix is any doubly subscripted array of elements arranged in rows and columns.","x":-1790,"y":620,"width":160,"height":240,"color":"#7744d5"},
		{"id":"e3a9f444331b7ff8","type":"file","file":"Assets/Pasted image 20251001113027.png","x":-2050,"y":160,"width":400,"height":219},
		{"id":"803e51a3a3976b23","type":"file","file":"Assets/Pasted image 20251001115709.png","x":-2050,"y":640,"width":260,"height":154},
		{"id":"15165aee58965487","type":"file","file":"Assets/Pasted image 20251001115832.png","x":-2061,"y":860,"width":431,"height":140},
		{"id":"879dbb85b4293cae","type":"text","text":"There is also the **outer product** of two vectors:\n$$ab^T = \\begin{bmatrix}\na_{1} \\\\\na_{2}\n\\end{bmatrix} * [b_{1}, b_{2}] = \\begin{bmatrix}\na_{1}b_{1} & a_{1}b_{2} \\\\\na_{2}b_{1} & a_{2}b_{2}\n\\end{bmatrix}$$\nwhich yields an n x m matrix.","x":-1630,"y":460,"width":400,"height":160,"color":"#7744d5"},
		{"id":"859e5e6d6fc8d0a0","type":"text","text":"**Norm** - functions that measure how large or how long a vector is in space. Similar to the distance between 0 and the point represented by the vector. \nThe inner product allows us to obtain the norm and the angle between two vectors: \n$$||\\vec{a}-\\vec{b}||^2 = ||a||^2 + ||b||^2 - 2||a||||b||\\cos \\theta$$\n$$||\\vec{a}-\\vec{b}||^2 = (\\vec{a}-\\vec{b})^T(\\vec{a}-\\vec{b}) = a^Ta+b^Tb-2a^Tb$$\nWe obtain:\n$$\\cos \\theta = \\frac{\\vec{a}^{T}\\vec{b}}{||a||||b||}$$","x":-1230,"y":460,"width":480,"height":340,"color":"#7744d5"},
		{"id":"77abd920d363e5fa","type":"file","file":"Assets/Pasted image 20251001113731.png","x":-1650,"y":160,"width":400,"height":259},
		{"id":"8688490c1006da17","type":"file","file":"Assets/Pasted image 20251001113756.png","x":-1250,"y":219,"width":399,"height":200},
		{"id":"b66a3b0c66b4d726","type":"file","file":"Assets/Pasted image 20251001120331.png","x":-1230,"y":820,"width":490,"height":360},
		{"id":"6e5305b5a37f25b7","type":"text","text":"**Matrix Characteristics**\n$$\\det(A) = \\det \\begin{bmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{bmatrix} = 1*4 - 2*3$$\nRank = # of linearly independent rows\nTrace = Sum of the main diagonal \n![[Pasted image 20251001121105.png]]","x":-1630,"y":920,"width":400,"height":260,"color":"#7744d5"},
		{"id":"ee101f1c789c794b","type":"text","text":"**Linear Independence**\n![[Pasted image 20251001121201.png]]\n![[Pasted image 20251001121242.png]]","x":-2552,"y":140,"width":491,"height":640,"color":"#7744d5"},
		{"id":"7be8b135c6ffd8d2","type":"text","text":"*Solving a System of Equations in Vector/Matrix Form*\nGiven two equations with unknown variables:\n$$x_{1} + x_{2} = 6$$\n$$2x_{1} + x_{2} = 9$$\nCan be represented as: $$\\begin{bmatrix}\n1 & 1 \\\\\n2 & 1\n\\end{bmatrix} * \\begin{bmatrix}\nx_{1} \\\\\nx_{2}\n\\end{bmatrix} = \\begin{bmatrix}\n6  \\\\\n9\n\\end{bmatrix}$$\nOr: `A * x = b`\nSolution:\n$$\\begin{bmatrix}\n1 & 1 \\\\\n2 & 1\n\\end{bmatrix} * \\begin{bmatrix}\nx_{1} \\\\\nx_{2}\n\\end{bmatrix} = \\begin{bmatrix}\n6  \\\\\n9\n\\end{bmatrix}$$\n$$\\begin{bmatrix}\n-1 & 1  \\\\\n2 & -1\n\\end{bmatrix} * \\begin{bmatrix}\n1 & 1 \\\\\n2 & 1\n\\end{bmatrix} * \\begin{bmatrix}\nx_{1} \\\\\nx_{2}\n\\end{bmatrix} = \\begin{bmatrix}\n-1 & 1  \\\\\n2 & -1\n\\end{bmatrix} * \\begin{bmatrix}\n6  \\\\\n9\n\\end{bmatrix}$$\n$$\\begin{bmatrix}\n1 & 0 \\\\\n0 & 1\n\\end{bmatrix} * \\begin{bmatrix}\nx_{1} \\\\\nx_{2}\n\\end{bmatrix} = \\begin{bmatrix}\n3 \\\\\n3\n\\end{bmatrix}$$\n$$\\begin{bmatrix}\nx_{1} \\\\\nx_{2}\n\\end{bmatrix} = \\begin{bmatrix}\n3 \\\\\n3\n\\end{bmatrix}$$\n![[Pasted image 20251001121829.png]]","x":-2553,"y":780,"width":492,"height":826,"color":"#7744d5"},
		{"id":"d5c8562566559229","type":"text","text":"Norms:\nLp Norm: $$||x||_{p = (\\sum^{}_{i}|x_{i}|^p)^{1/p}}$$\nMost popular L2 Norm: $$||x||_{2} = \\sqrt{\\vec{x}^T\\vec{x}}$$\nL1 Norm: $$||x||_{1} = (\\sum^{}_{i}|x_{i}|)$$\n\n\n","x":-1630,"y":620,"width":400,"height":300,"color":"#7744d5"},
		{"id":"f6e001312ced36d3","type":"text","text":"An eigenvector of a square matrix ùê¥ A is a special vector whose direction doesn‚Äôt change when the matrix is applied to it. Instead, it only gets stretched or shrunk. The amount by which it‚Äôs stretched is called the eigenvalue. $$Av = \\lambda v$$\nExample: \n$$A = \\begin{bmatrix}\n2 & 0  \\\\\n0 & 3\n\\end{bmatrix}, v_{1} = \\begin{bmatrix}\n1 \\\\\n0\n\\end{bmatrix}$$\n$$Av_{1} = \\begin{bmatrix}\n2 & 0 \\\\\n0 & 3 \n\\end{bmatrix} \\begin{bmatrix}\n1 \\\\\n0\n\\end{bmatrix} = \\begin{bmatrix}\n2 \\\\\n0\n\\end{bmatrix} = 2v_{1}$$\nSo, `v1` is an eigenvector with eigenvalue = 2\nNow take:\n$$v_{2} = \\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix}$$\n$$Av_{2} = \\begin{bmatrix}\n2 & 0  \\\\\n0 & 3\n\\end{bmatrix} \\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix} = \\begin{bmatrix}\n0 \\\\\n3\n\\end{bmatrix} = 3v_{2}$$\nSo `v2` is an eigenvector with eigenvalue = 3","x":-2055,"y":1000,"width":420,"height":606,"color":"#7744d5"},
		{"id":"6af36db4ff6c1f4b","type":"text","text":"Python NumPy operations:\n```Python\nimport numpy as np\n\n# -------------------------------\n# 1. VECTORS, MATRICES, AND TENSORS\n# -------------------------------\n\n# Vector (1D array)\nv = np.array([1, 2, 3])\n\n# Matrix (2D array)\nM = np.array([[1, 2], [3, 4]])\n\n# Tensor (nD array, here 3D)\nT = np.array([[[1, 2], [3, 4]],\n              [[5, 6], [7, 8]]])\n\n# Shape and dimensions\nprint(v.shape)   # (3,)\nprint(M.shape)   # (2,2)\nprint(T.shape)   # (2,2,2)\nprint(M.ndim)    # 2\n\n# -------------------------------\n# 2. VECTOR OPERATIONS\n# -------------------------------\n\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n\n# Addition, subtraction\nprint(a + b)      # [5 7 9]\nprint(a - b)      # [-3 -3 -3]\n\n# Scalar multiplication\nprint(3 * a)      # [3 6 9]\n\n# Element-wise multiplication\nprint(a * b)      # [ 4 10 18]\n\n# Element-wise division\nprint(a / b)      # [0.25 0.4  0.5 ]\n\n# -------------------------------\n# 3. INNER PRODUCT, OUTER PRODUCT, NORMS\n# -------------------------------\n\n# Dot (inner) product\ndot = np.dot(a, b)         # scalar\nprint(dot)                 # 32\n\n# Outer product\nouter = np.outer(a, b)\nprint(outer)\n# [[ 4  5  6]\n#  [ 8 10 12]\n#  [12 15 18]]\n\n# L2 Norm (Euclidean length)\nprint(np.linalg.norm(a))   # sqrt(1^2+2^2+3^2) = 3.741...\n\n# L1 Norm\nprint(np.linalg.norm(a, 1))  # 6\n\n# Infinity Norm (max abs value)\nprint(np.linalg.norm(a, np.inf))  # 3\n\n# -------------------------------\n# 4. MATRIX OPERATIONS\n# -------------------------------\n\nA = np.array([[1, 2], [3, 4]])\n\n# Transpose\nprint(A.T)   # [[1 3]\n             #  [2 4]]\n\n# Matrix addition & subtraction\nB = np.array([[5, 6], [7, 8]])\nprint(A + B)\nprint(A - B)\n\n# Scalar multiplication\nprint(2 * A)\n\n# Matrix multiplication\nprint(np.matmul(A, B))\nprint(A @ B)   # Equivalent\n\n# Element-wise multiplication\nprint(A * B)\n\n# -------------------------------\n# 5. SOLVING LINEAR EQUATIONS\n# -------------------------------\n\n# Solve Ax = b\nA = np.array([[3, 1], [1, 2]])\nb = np.array([9, 8])\nx = np.linalg.solve(A, b)\nprint(x)   # Solution for x\n\n# Verify\nprint(A @ x)  # should equal b\n\n# -------------------------------\n# 6. MATRIX RANK, TRACE, DETERMINANT\n# -------------------------------\n\nM = np.array([[1, 2], [3, 4]])\n\n# Rank\nprint(np.linalg.matrix_rank(M))   # 2\n\n# Trace (sum of diagonal elements)\nprint(np.trace(M))   # 5\n\n# Determinant\nprint(np.linalg.det(M))   # -2.0\n\n# -------------------------------\n# 7. EIGENVECTORS & EIGENVALUES\n# -------------------------------\n\nC = np.array([[4, -2],\n              [1,  1]])\n\n# Compute eigenvalues and eigenvectors\neigvals, eigvecs = np.linalg.eig(C)\nprint(\"Eigenvalues:\", eigvals)\nprint(\"Eigenvectors:\\n\", eigvecs)\n\n# Check property: A v = Œª v\nfor i in range(len(eigvals)):\n    left = C @ eigvecs[:, i]\n    right = eigvals[i] * eigvecs[:, i]\n    print(np.allclose(left, right))  # True\n\n```","x":-560,"y":-780,"width":2177,"height":3420}
	],
	"edges":[]
}